diff --git a/lib/bcdice/arithmetic/node.rb b/lib/bcdice/arithmetic/node.rb
--- a/lib/bcdice/arithmetic/node.rb
+++ b/lib/bcdice/arithmetic/node.rb
@@ -48,6 +48,8 @@ module BCDice
         def eval(round_type)
           l = @lhs.eval(round_type)
           r = @rhs.eval(round_type)
+
+          raise ZeroDivisionError if r == 0
           divide_and_round(l, r, round_type)
         end

@@ -103,7 +105,7 @@ module BCDice
           when RoundType::ROUND
             (dividend.to_f / divisor).round
           else # RoundType::FLOOR
-            dividend / divisor
+            (dividend / divisor).floor
           end
         end
       end
@@ -155,7 +157,7 @@ module BCDice
         # @param [Symbol] _round_type ゲームシステムの端数処理設定
         # @return [Integer]
         def divide_and_round(dividend, divisor, _round_type)
-          dividend / divisor
+          (dividend / divisor).to_i
         end
       end

diff --git a/lib/bcdice/base.rb b/lib/bcdice/base.rb
--- a/lib/bcdice/base.rb
+++ b/lib/bcdice/base.rb
@@ -328,7 +328,7 @@ module BCDice
       num = @randomizer.roll_sum(count, 6)
       debug("num", num)

-      index = ((num - 1) / 2)
+      index = ((num - 1) / 2).to_i
       debug("index", index)

       text = table[index]
diff --git a/lib/bcdice/common_command/add_dice/node.rb b/lib/bcdice/common_command/add_dice/node.rb
--- a/lib/bcdice/common_command/add_dice/node.rb
+++ b/lib/bcdice/common_command/add_dice/node.rb
@@ -140,7 +140,7 @@ module BCDice
             lhs = @lhs.eval(game_system, randomizer)
             rhs = @rhs.eval(game_system, randomizer)

-            return calc(lhs, rhs, game_system.round_type)
+            return calc(lhs, rhs, game_system.round_type).to_i
           end

           # @return [Boolean]
@@ -177,7 +177,7 @@ module BCDice
           # @param _round_type [Symbol] ゲームシステムの端数処理設定
           # @return [Integer] 演算の結果
           def calc(lhs, rhs, _round_type)
-            lhs.send(@op, rhs)
+            lhs.send(@op, rhs).to_i
           end

           # S式で使う演算子の表現を返す
@@ -242,7 +242,7 @@ module BCDice
               return 1
             end

-            return divide_and_round(lhs, rhs, round_type)
+            return divide_and_round(lhs, rhs, round_type).to_i
           end

           # 除算および端数処理を行う
@@ -273,7 +273,7 @@ module BCDice
             when RoundType::ROUND
               (dividend.to_f / divisor).round
             else # RoundType::FLOOR
-              dividend / divisor
+              (dividend / divisor).floor
             end
           end
         end
@@ -319,7 +319,7 @@ module BCDice
           # @param (see DivideWithGameSystemDefault#divide_and_round)
           # @return [Integer]
           def divide_and_round(dividend, divisor, _round_type)
-            dividend / divisor
+            (dividend / divisor).to_i
           end
         end

@@ -342,7 +342,7 @@ module BCDice
           # @param [Randomizer] randomizer ランダマイザ
           # @return [Integer] 評価結果
           def eval(game_system, randomizer)
-            -@body.eval(game_system, randomizer)
+            -@body.eval(game_system, randomizer).to_i
           end

           # @return [Boolean]
@@ -398,7 +398,7 @@ module BCDice
             total = dice_list.sum()
             @text = "#{total}[#{dice_list.join(',')}]"

-            return total
+            return total.to_i
           end

           # @return [Boolean]
@@ -525,7 +525,7 @@ module BCDice

             @text = "#{total}[#{sorted_values.join(',')}]"

-            return total
+            return total.to_i
           end

           # @return [Boolean]
@@ -566,7 +566,7 @@ module BCDice
           # @param randomizer [Randomizer]
           # @return [integer]
           def eval(game_system, randomizer)
-            @expr.eval(game_system, randomizer)
+            @expr.eval(game_system, randomizer).to_i
           end

           # @return [Boolean]
@@ -599,7 +599,7 @@ module BCDice
           # ノードを初期化する
           # @param [Integer] literal 値
           def initialize(literal)
-            @literal = literal
+            @literal = literal.to_i
           end

           # 符号を反転した結果の数値ノードを返す
@@ -611,7 +611,7 @@ module BCDice
           # ノードを評価する
           # @return [Integer] 格納している値
           def eval(_game_system, _randomizer)
-            @literal
+            @literal.to_i
           end

           # @return [Boolean]
diff --git a/lib/bcdice/common_command/calc/node.rb b/lib/bcdice/common_command/calc/node.rb
--- a/lib/bcdice/common_command/calc/node.rb
+++ b/lib/bcdice/common_command/calc/node.rb
@@ -15,7 +15,7 @@ module BCDice
           def eval(round_type)
             value =
               begin
-                @expr.eval(round_type)
+                @expr.eval(round_type).to_i
               rescue ZeroDivisionError
                 "ゼロ除算が発生したため計算できませんでした"
               end
diff --git a/lib/bcdice/common_command/repeat.rb b/lib/bcdice/common_command/repeat.rb
--- a/lib/bcdice/common_command/repeat.rb
+++ b/lib/bcdice/common_command/repeat.rb
@@ -68,7 +68,7 @@ module BCDice
           cmd.eval()
         end

-        if results.count(nil) == @times
+        if results.count { |i| i == nil } == @times
           return result_with_text("繰り返し対象のコマンドが実行できませんでした (#{@trailer})")
         end

@@ -84,7 +84,7 @@ module BCDice
       private

       def validate
-        if /\A(repeat|rep|x)\d+/.match?(@trailer)
+        if /^(repeat|rep|x)\d+/.match?(@trailer)
           result_with_text("Repeatコマンドの重複はできません")
         elsif @times < 1 || REPEAT_LIMIT < @times
           result_with_text("繰り返し回数は1以上、#{REPEAT_LIMIT}以下としてください")
diff --git a/lib/bcdice/dice_table/d66_table.rb b/lib/bcdice/dice_table/d66_table.rb
--- a/lib/bcdice/dice_table/d66_table.rb
+++ b/lib/bcdice/dice_table/d66_table.rb
@@ -37,7 +37,7 @@ module BCDice
         end

         key = dice[0] * 10 + dice[1]
-        chosen = @items[key]
+        chosen = @items[key] || @items[key.to_s]
         chosen = chosen.roll(randomizer) if chosen.respond_to?(:roll)
         RollResult.new(@name, key, chosen)
       end
diff --git a/lib/bcdice/dice_table/range_table.rb b/lib/bcdice/dice_table/range_table.rb
--- a/lib/bcdice/dice_table/range_table.rb
+++ b/lib/bcdice/dice_table/range_table.rb
@@ -53,7 +53,7 @@ module BCDice
       Item = Struct.new(:range, :content)

       # 項目を選ぶときのダイスロールの方法を表す正規表現
-      DICE_ROLL_METHOD_RE = /\A(\d+)D(\d+)\z/i.freeze
+      DICE_ROLL_METHOD_RE = /^(\d+)D(\d+)$/i.freeze

       # 表を振った結果の整形処理（既定の処理）
       DEFAULT_FORMATTER = lambda do |table, result|
diff --git a/lib/bcdice/game_system/AFF2e.rb b/lib/bcdice/game_system/AFF2e.rb
--- a/lib/bcdice/game_system/AFF2e.rb
+++ b/lib/bcdice/game_system/AFF2e.rb
@@ -71,7 +71,7 @@ module BCDice

       def eval_game_system_specific_command(command)
         case command
-        when /\AFF/
+        when /^FF/
           # 対抗なしロール
           # '成功' or '失敗' を出力する
           #
@@ -88,7 +88,7 @@ module BCDice
           expr = "#{total}[#{dice_str}]"
           succ = successful_or_failed(total, diff)
           sequence = [parentheses(dice_command), expr, succ]
-        when /\AFR/
+        when /^FR/
           # 対抗ロール
           # 値を出力する
           #
@@ -105,13 +105,13 @@ module BCDice
           expr = "#{total}[#{dice_str}]#{explicit_sign corr}"
           crit = critical(total)
           sequence = [parentheses(dice_command), expr, crit, total + corr].compact
-        when /\AFD/
+        when /^FD/
           # 武器防具ロール
           # ダメージを出力する
           #
           md = Regexp.last_match
           term = md.post_match
-          md = /\A\[(.+)\]/.match(term)
+          md = /^\[(.+)\]/.match(term)
           unless md
             return 'ダメージスロットは必須です。'
           end
diff --git a/lib/bcdice/game_system/Amadeus.rb b/lib/bcdice/game_system/Amadeus.rb
--- a/lib/bcdice/game_system/Amadeus.rb
+++ b/lib/bcdice/game_system/Amadeus.rb
@@ -101,7 +101,7 @@ module BCDice
               end

             if available_inga
-              inga = inga_table[dice - 1]
+              inga = inga_table[(dice - 1)]
               "#{total}_#{result}[#{dice}#{inga}]"
             else
               "#{total}_#{result}[#{dice}]"
diff --git a/lib/bcdice/game_system/AssaultEngine.rb b/lib/bcdice/game_system/AssaultEngine.rb
--- a/lib/bcdice/game_system/AssaultEngine.rb
+++ b/lib/bcdice/game_system/AssaultEngine.rb
@@ -40,7 +40,7 @@ module BCDice

         if cmd.command.include?("AES") # SWAP初回
           total = @randomizer.roll_once(100) % 100 # 0-99
-          swap = (total % 10) * 10 + (total / 10)
+          swap = (total % 10) * 10 + (total / 10).floor
           r1 = judge(target, total)
           r2 = judge(target, swap)
           text = "(AES#{format00(target)}) ＞ #{r1.text} / スワップ#{r2.text}"
@@ -53,7 +53,7 @@ module BCDice
         else # リロール
           now = cmd.prefix_number
           die = @randomizer.roll_once(10) % 10 # 0-9
-          new1 = judge(target, (now / 10 * 10) + die)    # 1の位を振り直す
+          new1 = judge(target, ((now / 10).floor * 10) + die)    # 1の位を振り直す
           new2 = judge(target, now % 10 + die * 10)      # 10の位を振り直す

           text = "(#{format00(now)}AE#{format00(target)}) ＞ #{die} ＞ #{new1.text} / #{new2.text}"
@@ -78,7 +78,7 @@ module BCDice
       end

       def judge(target, total)
-        double = (total / 10) == (total % 10)
+        double = (total / 10).floor == (total % 10)
         total_text = format00(total)
         if total <= target
           double ? Result.critical("(#{total_text})クリティカル") : Result.success("(#{total_text})成功")
diff --git a/lib/bcdice/game_system/ChaosFlare.rb b/lib/bcdice/game_system/ChaosFlare.rb
--- a/lib/bcdice/game_system/ChaosFlare.rb
+++ b/lib/bcdice/game_system/ChaosFlare.rb
@@ -93,7 +93,7 @@ module BCDice
             return "因果表(#{num}) ＞ #{FATE_TABLE[num][0]}"
           end

-          dice1 = num / 10
+          dice1 = (num / 10).to_i
           dice2 = num % 10
           if !(1..6).include?(dice1) || !(1..6).include?(dice2)
             return nil
@@ -104,7 +104,7 @@ module BCDice
         end

         index1 = dice1
-        index2 = (dice2 / 2) - 1
+        index2 = (dice2 / 2).to_i - 1
         return "因果表(#{dice1}#{dice2}) ＞ #{FATE_TABLE[index1][index2]}"
       end

diff --git a/lib/bcdice/game_system/Chill.rb b/lib/bcdice/game_system/Chill.rb
--- a/lib/bcdice/game_system/Chill.rb
+++ b/lib/bcdice/game_system/Chill.rb
@@ -34,9 +34,9 @@ module BCDice
           Result.failure("失敗")
         elsif total >= (target * 0.9)
           Result.success("Ｌ成功")
-        elsif total >= (target / 2)
+        elsif total >= (target / 2).to_i
           Result.success("Ｍ成功")
-        elsif total >= (target / 10)
+        elsif total >= (target / 10).to_i
           Result.success("Ｈ成功")
         else
           Result.critical("Ｃ成功")
diff --git a/lib/bcdice/game_system/Chill3.rb b/lib/bcdice/game_system/Chill3.rb
--- a/lib/bcdice/game_system/Chill3.rb
+++ b/lib/bcdice/game_system/Chill3.rb
@@ -24,7 +24,7 @@ module BCDice
         return nil unless cmp_op == :<=

         # ゾロ目ならC-ResultかBotch
-        tens = (dice_total / 10) % 10
+        tens = (dice_total / 10).to_i % 10
         ones = dice_total % 10

         if tens == ones
@@ -38,7 +38,7 @@ module BCDice
             return Result.critical("Ｃ成功")
           end
         elsif (total <= target) || (dice_total == 1) # 01は必ず成功
-          if total <= (target / 2)
+          if total <= (target / 2).to_i
             return Result.success("Ｈ成功")
           else
             return Result.success("Ｌ成功")
diff --git a/lib/bcdice/game_system/ColossalHunter.rb b/lib/bcdice/game_system/ColossalHunter.rb
--- a/lib/bcdice/game_system/ColossalHunter.rb
+++ b/lib/bcdice/game_system/ColossalHunter.rb
@@ -57,7 +57,7 @@ module BCDice
           return nil
         end

-        parsed.command = "3CH" unless parsed.command.start_with?(/\d/)
+        parsed.command = "3CH" unless parsed.command.match?(/^\d/)

         dice_count = parsed.command.to_i
         modify = parsed.modify_number
@@ -72,24 +72,23 @@ module BCDice
         # 出力文の生成
         text = "(#{parsed}) ＞ #{dice}[#{dice_str}]#{Format.modifier(modify)} ＞ #{total}"

-        result = get_judge_result(dice, total, parsed)
+        result = get_judge_result(dice, total, parsed, text)

-        result.text = text + result.text
         return result
       end

       # 成否判定
-      def get_judge_result(dice, total, parsed)
+      def get_judge_result(dice, total, parsed, text)
         if dice <= 5
-          Result.fumble(" ＞ ファンブル")
+          Result.fumble(text + " ＞ ファンブル")
         elsif total >= 16
-          Result.critical(" ＞ クリティカル")
+          Result.critical(text + " ＞ クリティカル")
         elsif parsed.cmp_op.nil?
-          Result.new("")
+          Result.new(text)
         elsif total >= parsed.target_number
-          Result.success(" ＞ 成功")
+          Result.success(text + " ＞ 成功")
         else
-          Result.failure(" ＞ 失敗")
+          Result.failure(text + " ＞ 失敗")
         end
       end

diff --git a/lib/bcdice/game_system/Cthulhu.rb b/lib/bcdice/game_system/Cthulhu.rb
--- a/lib/bcdice/game_system/Cthulhu.rb
+++ b/lib/bcdice/game_system/Cthulhu.rb
@@ -170,7 +170,7 @@ module BCDice

       def compare(total, target, broken_number = 0)
         result = CompareResult.new(@locale)
-        target_special = (target * @special_percentage / 100).clamp(1, 100)
+        target_special = (target * @special_percentage / 100).to_i.clamp(1, 100)

         if (total <= target) && (total < 100)
           result.success = true
diff --git a/lib/bcdice/game_system/Cthulhu7th.rb b/lib/bcdice/game_system/Cthulhu7th.rb
--- a/lib/bcdice/game_system/Cthulhu7th.rb
+++ b/lib/bcdice/game_system/Cthulhu7th.rb
@@ -121,9 +121,9 @@ module BCDice
             ResultLevel.new(:critical)
           elsif total >= fumble
             ResultLevel.new(:fumble)
-          elsif total <= (difficulty / 5)
+          elsif total <= (difficulty / 5).to_i
             ResultLevel.new(:extreme_success)
-          elsif total <= (difficulty / 2)
+          elsif total <= (difficulty / 2).to_i
             ResultLevel.new(:hard_success)
           elsif total <= difficulty
             ResultLevel.new(:regular_success)
@@ -194,9 +194,9 @@ module BCDice
         if difficulty == 0
           difficulty = nil
         elsif difficulty_level == "H"
-          difficulty /= 2
+          difficulty = (difficulty / 2).to_i
         elsif difficulty_level == "E"
-          difficulty /= 5
+          difficulty = (difficulty / 5).to_i
         elsif difficulty_level == "C"
           difficulty = 0
         end
diff --git a/lib/bcdice/game_system/Cthulhu7th_ChineseTraditional.rb b/lib/bcdice/game_system/Cthulhu7th_ChineseTraditional.rb
--- a/lib/bcdice/game_system/Cthulhu7th_ChineseTraditional.rb
+++ b/lib/bcdice/game_system/Cthulhu7th_ChineseTraditional.rb
@@ -113,8 +113,8 @@ module BCDice
       def getCheckResultText(total, diff, fumbleable = false)
         if total <= diff
           return "決定性的成功" if total == 1
-          return "極限的成功" if total <= (diff / 5)
-          return "困難的成功" if total <= (diff / 2)
+          return "極限的成功" if total <= (diff / 5).to_i
+          return "困難的成功" if total <= (diff / 2).to_i

           return "通常成功"
         end
@@ -344,7 +344,7 @@ module BCDice
       end

       def getSetOfBullet(diff)
-        bullet_set_count = diff / 10
+        bullet_set_count = (diff / 10).to_i

         if (diff >= 1) && (diff < 10)
           bullet_set_count = 1 # 技能值９以下的最低限度保障處理
@@ -354,7 +354,7 @@ module BCDice
       end

       def getHitBulletCountBase(diff, bullet_set_count)
-        hit_bullet_count_base = (bullet_set_count / 2)
+        hit_bullet_count_base = (bullet_set_count / 2).to_i

         if (diff >= 1) && (diff < 10)
           hit_bullet_count_base = 1 # 技能值９以下的最低限度保障處理
diff --git a/lib/bcdice/game_system/Cthulhu7th_Korean.rb b/lib/bcdice/game_system/Cthulhu7th_Korean.rb
--- a/lib/bcdice/game_system/Cthulhu7th_Korean.rb
+++ b/lib/bcdice/game_system/Cthulhu7th_Korean.rb
@@ -110,8 +110,8 @@ module BCDice
       def getCheckResultText(total, diff, fumbleable = false)
         if total <= diff
           return "대성공" if total == 1
-          return "대단한 성공" if total <= (diff / 5)
-          return "어려운 성공" if total <= (diff / 2)
+          return "대단한 성공" if total <= (diff / 5).to_i
+          return "어려운 성공" if total <= (diff / 2).to_i

           return "보통 성공"
         end
@@ -302,7 +302,7 @@ module BCDice
           lost_bullet_count = bullet_count
         end

-        return hit_bullet_count, impale_bullet_count, lost_bullet_count
+        return hit_bullet_count.to_i, impale_bullet_count.to_i, lost_bullet_count.to_i
       end

       def getSuccessListImpaleBulletList(more_difficlty)
@@ -341,7 +341,7 @@ module BCDice
       end

       def getSetOfBullet(diff)
-        bullet_set_count = diff / 10
+        bullet_set_count = (diff / 10).to_i

         if (diff >= 1) && (diff < 10)
           bullet_set_count = 1 # 기능 수치가 9 이하일 때의 최저수치 보장 처리
@@ -351,7 +351,7 @@ module BCDice
       end

       def getHitBulletCountBase(diff, bullet_set_count)
-        hit_bullet_count_base = (bullet_set_count / 2)
+        hit_bullet_count_base = (bullet_set_count / 2).to_i

         if (diff >= 1) && (diff < 10)
           hit_bullet_count_base = 1 # 기능 수치가 9 이하일 때의 최저수치 보장
diff --git a/lib/bcdice/game_system/CthulhuTech.rb b/lib/bcdice/game_system/CthulhuTech.rb
--- a/lib/bcdice/game_system/CthulhuTech.rb
+++ b/lib/bcdice/game_system/CthulhuTech.rb
@@ -53,7 +53,7 @@ module BCDice
           dice_values = randomizer.roll_barabara(@num, 10)

           # ファンブル：出目の半分（小数点以下切り上げ）以上が1の場合
-          fumble = dice_values.count(1) >= (dice_values.length + 1) / 2
+          fumble = dice_values.count(1) >= ((dice_values.length + 1) / 2).to_i

           sorted_dice_values = dice_values.sort
           roll_result = calculate_roll_result(sorted_dice_values)
@@ -234,7 +234,7 @@ module BCDice
       private

       # 判定コマンドの正規表現
-      TEST_RE = /\A(\d+)D10((?:[-+]\d+)+)?(>=?)(\d+)\z/.freeze
+      TEST_RE = /^(\d+)D10((?:[-+]\d+)+)?(>=?)(\d+)$/.freeze

       # 構文解析する
       # @param [String] command コマンド
diff --git a/lib/bcdice/game_system/Dracurouge.rb b/lib/bcdice/game_system/Dracurouge.rb
--- a/lib/bcdice/game_system/Dracurouge.rb
+++ b/lib/bcdice/game_system/Dracurouge.rb
@@ -89,7 +89,7 @@ module BCDice
         one_count = dice_list.count(1)
         six_count = dice_list.count(6)

-        return (one_count / 2) + (six_count / 2)
+        return (one_count / 2).to_i + (six_count / 2).to_i
       end

       def apply_thirsty_point(dice_list, thirsty_point)
@@ -273,7 +273,7 @@ module BCDice
           list = Array.new(times) do
             randomizer.roll_barabara(sides.length, 6)
                       .reverse # テスト系の互換性のために反転する
-                      .map.with_index { |x, idx| x * (10**idx) }
+                      .map.with_index { |x, idx| x * (10**idx).to_i }
                       .sum()
           end

diff --git a/lib/bcdice/game_system/EarthDawn3.rb b/lib/bcdice/game_system/EarthDawn3.rb
--- a/lib/bcdice/game_system/EarthDawn3.rb
+++ b/lib/bcdice/game_system/EarthDawn3.rb
@@ -147,7 +147,7 @@ module BCDice

         result = [0, 0, 0, 0, 0, 0, 0]

-        loopCount = (overStep / stepRythm.size)
+        loopCount = (overStep / stepRythm.size).to_i

         loopCount.times do
           addStepToResult(result, baseStepInfo)
diff --git a/lib/bcdice/game_system/EarthDawn4.rb b/lib/bcdice/game_system/EarthDawn4.rb
--- a/lib/bcdice/game_system/EarthDawn4.rb
+++ b/lib/bcdice/game_system/EarthDawn4.rb
@@ -193,7 +193,7 @@ module BCDice

         result = [0, 0, 0, 0, 0, 0, 0]

-        loopCount = (overStep / stepRythm.size)
+        loopCount = (overStep / stepRythm.size).to_i

         loopCount.times do
           addStepToResult(result, overBounusStep)
@@ -225,7 +225,7 @@ module BCDice
           return "失敗"
         end

-        level = (diff / 5) + 1
+        level = (diff / 5).to_i + 1

         return "成功 レベル：#{level}"
       end
diff --git a/lib/bcdice/game_system/EclipsePhase.rb b/lib/bcdice/game_system/EclipsePhase.rb
--- a/lib/bcdice/game_system/EclipsePhase.rb
+++ b/lib/bcdice/game_system/EclipsePhase.rb
@@ -21,7 +21,7 @@ module BCDice
         return nil unless cmp_op == :<=

         dice_value = total % 100 # 出目00は100ではなく00とする
-        dice_ten_place = dice_value / 10
+        dice_ten_place = (dice_value / 10).to_i
         dice_one_place = dice_value % 10

         if dice_ten_place == dice_one_place
diff --git a/lib/bcdice/game_system/Emoklore.rb b/lib/bcdice/game_system/Emoklore.rb
--- a/lib/bcdice/game_system/Emoklore.rb
+++ b/lib/bcdice/game_system/Emoklore.rb
@@ -67,7 +67,7 @@ module BCDice
         success_value = 2 * critical + success - fumble
         result = compare_result(success_value)

-        result.text = "#{values} ＞ #{success_value} ＞ 成功数#{success_value} #{result.text}"
+        result.text = "[#{values.join(', ')}] ＞ #{success_value} ＞ 成功数#{success_value} #{result.text}"
         return result
       end

diff --git a/lib/bcdice/game_system/GardenOrder.rb b/lib/bcdice/game_system/GardenOrder.rb
--- a/lib/bcdice/game_system/GardenOrder.rb
+++ b/lib/bcdice/game_system/GardenOrder.rb
@@ -52,12 +52,12 @@ module BCDice
       def get_critical_border(critical_border_text, success_rate)
         return critical_border_text.to_i unless critical_border_text.nil?

-        critical_border = [success_rate / 5, 1].max
+        critical_border = [success_rate / 5, 1].max.to_i
         return critical_border
       end

       def check_roll_repeat_attack(success_rate, repeat_count, critical_border)
-        success_rate_per_one = success_rate / repeat_count
+        success_rate_per_one = (success_rate / repeat_count).to_i
         # 連続攻撃は最終的な成功率が50%以上であることが必要 cf. p217
         if repeat_count > 1 && success_rate_per_one < 50
           return "D100<=#{success_rate_per_one}@#{critical_border} ＞ 連続攻撃は成功率が50％以上必要です"
diff --git a/lib/bcdice/game_system/Gundog.rb b/lib/bcdice/game_system/Gundog.rb
--- a/lib/bcdice/game_system/Gundog.rb
+++ b/lib/bcdice/game_system/Gundog.rb
@@ -34,7 +34,7 @@ module BCDice
         elsif target == "?"
           Result.nothing
         elsif total <= target
-          dig10 = total / 10
+          dig10 = (total / 10).to_i
           dig1 = total - dig10 * 10
           dig10 = 0 if dig10 >= 10
           dig1 = 0 if dig1 >= 10 # 条件的にはあり得ない(笑
diff --git a/lib/bcdice/game_system/GundogRevised.rb b/lib/bcdice/game_system/GundogRevised.rb
--- a/lib/bcdice/game_system/GundogRevised.rb
+++ b/lib/bcdice/game_system/GundogRevised.rb
@@ -45,7 +45,7 @@ module BCDice
         elsif target == "?"
           Result.nothing
         elsif total <= target
-          dig10 = total / 10
+          dig10 = (total / 10).to_i
           dig1 = total - dig10 * 10
           dig10 = 0 if dig10 >= 10
           dig1 = 0 if dig1 >= 10 # 条件的にはあり得ない(笑
diff --git a/lib/bcdice/game_system/GurpsFW.rb b/lib/bcdice/game_system/GurpsFW.rb
--- a/lib/bcdice/game_system/GurpsFW.rb
+++ b/lib/bcdice/game_system/GurpsFW.rb
@@ -321,7 +321,7 @@ module BCDice
           tableName = "財宝テーブル"
           diff = Regexp.last_match(1)
           depth = Regexp.last_match(2).to_i
-          num = depth / 10
+          num = (depth / 10).to_i
           if num >= 6
             num = 5
           end
diff --git a/lib/bcdice/game_system/Hieizan.rb b/lib/bcdice/game_system/Hieizan.rb
--- a/lib/bcdice/game_system/Hieizan.rb
+++ b/lib/bcdice/game_system/Hieizan.rb
@@ -24,7 +24,7 @@ module BCDice
           Result.fumble("大失敗")
         elsif total >= 96
           Result.failure("自動失敗")
-        elsif total <= (target / 5)
+        elsif total <= (target / 5).to_i
           Result.critical("大成功")
         elsif total <= 1
           Result.success("自動成功")
diff --git a/lib/bcdice/game_system/InfiniteFantasia.rb b/lib/bcdice/game_system/InfiniteFantasia.rb
--- a/lib/bcdice/game_system/InfiniteFantasia.rb
+++ b/lib/bcdice/game_system/InfiniteFantasia.rb
@@ -25,15 +25,15 @@ module BCDice
         end

         output =
-          if total <= (target / 32)
+          if total <= (target / 32).to_i
             "32レベル成功(32Lv+)"
-          elsif total <= (target / 16)
+          elsif total <= (target / 16).to_i
             "16レベル成功(16Lv+)"
-          elsif total <= (target / 8)
+          elsif total <= (target / 8).to_i
             "8レベル成功"
-          elsif total <= (target / 4)
+          elsif total <= (target / 4).to_i
             "4レベル成功"
-          elsif total <= (target / 2)
+          elsif total <= (target / 2).to_i
             "2レベル成功"
           else
             "1レベル成功"
diff --git a/lib/bcdice/game_system/KemonoNoMori.rb b/lib/bcdice/game_system/KemonoNoMori.rb
--- a/lib/bcdice/game_system/KemonoNoMori.rb
+++ b/lib/bcdice/game_system/KemonoNoMori.rb
@@ -61,7 +61,7 @@ module BCDice

         # 行為判定の成功度は [目標値の10の位の数+1]
         # 継続判定の成功度は固定で+1
-        success_degree = is_action_judge ? target_total / 10 + 1 : 1
+        success_degree = is_action_judge ? (target_total / 10).to_i + 1 : 1

         dice_total = @randomizer.roll_once(12)
         debug('dice_total, target_total, success_degree = ', dice_total, target_total, success_degree)
diff --git a/lib/bcdice/game_system/LogHorizon.rb b/lib/bcdice/game_system/LogHorizon.rb
--- a/lib/bcdice/game_system/LogHorizon.rb
+++ b/lib/bcdice/game_system/LogHorizon.rb
@@ -1,6 +1,7 @@
 # frozen_string_literal: true

 require "bcdice/base"
+require "bcdice/arithmetic_evaluator"

 module BCDice
   module GameSystem
@@ -361,13 +362,13 @@ module BCDice
           if index <= 6
             translate("LogHorizon.TRS.below_lower_limit", value: 6) # 6以下の出目は未定義です
           elsif index <= 62
-            @items[index]
+            @items[index.to_s]
           elsif index <= 72
-            "#{@items[index - 10]}&80G"
+            "#{@items[(index - 10).to_s]}&80G"
           elsif index <= 82
-            "#{@items[index - 20]}&160G"
+            "#{@items[(index - 20).to_s]}&160G"
           elsif index <= 87
-            "#{@items[index - 30]}&260G"
+            "#{@items[(index - 30).to_s]}&260G"
           else
             translate("LogHorizon.TRS.exceed_upper_limit", value: 88) # 88以上の出目は未定義です
           end
@@ -382,7 +383,7 @@ module BCDice
           if index <= 6
             translate("LogHorizon.TRS.below_lower_limit", value: 6)
           elsif index <= 53
-            @items[index]
+            @items[index.to_s]
           else
             translate("LogHorizon.TRS.exceed_upper_limit", value: 54)
           end
@@ -397,13 +398,13 @@ module BCDice
           if index <= 6
             translate("LogHorizon.TRS.below_lower_limit", value: 6)
           elsif index <= 162
-            @items[index]
+            @items[index.to_s]
           elsif index <= 172
-            "#{@items[index - 10]}&200G"
+            "#{@items[(index - 10).to_s]}&200G"
           elsif index <= 182
-            "#{@items[index - 20]}&400G"
+            "#{@items[(index - 20).to_s]}&400G"
           elsif index <= 187
-            "#{@items[index - 30]}&600G"
+            "#{@items[(index - 30).to_s]}&600G"
           else
             translate("LogHorizon.TRS.exceed_upper_limit", value: 188)
           end
@@ -512,7 +513,7 @@ module BCDice

         table_name = translate("LogHorizon.ESTL.name")
         table = translate("LogHorizon.ESTL.items")
-        chosen = table[total].chomp
+        chosen = table[total.to_s].chomp

         return "#{table_name}(#{total}#{dice_str})\n#{chosen}"
       end
diff --git a/lib/bcdice/game_system/MetalHead.rb b/lib/bcdice/game_system/MetalHead.rb
--- a/lib/bcdice/game_system/MetalHead.rb
+++ b/lib/bcdice/game_system/MetalHead.rb
@@ -42,11 +42,11 @@ module BCDice
         return result if result

         case command
-        when /\ACRC(\w)(\d+)\z/
+        when /^CRC(\w)(\d+)$/
           suv = Regexp.last_match(1)
           num = Regexp.last_match(2)
           return mh_crc_table(suv, num)
-        when /\AHR<=(.+)/
+        when /^HR<=(.+)/
           target = ArithmeticEvaluator.eval(
             Regexp.last_match(1), round_type: @round_type
           )
diff --git a/lib/bcdice/game_system/NightmareHunterDeep.rb b/lib/bcdice/game_system/NightmareHunterDeep.rb
--- a/lib/bcdice/game_system/NightmareHunterDeep.rb
+++ b/lib/bcdice/game_system/NightmareHunterDeep.rb
@@ -81,8 +81,8 @@ module BCDice
           return total >= target ? "成功" : "失敗"
         end

-        success_lv = (total + 1) / 5
-        success_nl = (total - 5) / 5
+        success_lv = ((total + 1) / 5).to_i
+        success_nl = ((total - 5) / 5).to_i

         return success_lv > 0 ? "Lv#{success_lv}/NL#{success_nl}成功" : "失敗"
       end
diff --git a/lib/bcdice/game_system/NinjaSlayer.rb b/lib/bcdice/game_system/NinjaSlayer.rb
--- a/lib/bcdice/game_system/NinjaSlayer.rb
+++ b/lib/bcdice/game_system/NinjaSlayer.rb
@@ -48,18 +48,18 @@ module BCDice
       end

       # 難易度の値の正規表現
-      DIFFICULTY_VALUE_RE = /UH|[2-6KENH]/i.freeze
+      DIFFICULTY_VALUE_RE = 'UH|[2-6KENH]'.freeze
       # 難易度の正規表現
-      DIFFICULTY_RE = /\[(#{DIFFICULTY_VALUE_RE})\]|@(#{DIFFICULTY_VALUE_RE})/io.freeze
+      DIFFICULTY_RE = "(\\[(#{DIFFICULTY_VALUE_RE})\\]|@(#{DIFFICULTY_VALUE_RE}))".freeze

       # 通常判定の正規表現
-      NJ_RE = /\A(S)?NJ(\d+)#{DIFFICULTY_RE}?\z/io.freeze
+      NJ_RE = /^(S)?NJ(\d+)#{DIFFICULTY_RE}?$/io.freeze
       # 回避判定の正規表現
-      EV_RE = %r{\AEV(\d+)#{DIFFICULTY_RE}?(?:/(\d+))?\z}io.freeze
+      EV_RE = /^EV(\d+)#{DIFFICULTY_RE}?(?:\/(\d+))?$/io.freeze
       # 近接攻撃の正規表現
-      AT_RE = /\AAT(\d+)#{DIFFICULTY_RE}?\z/io.freeze
+      AT_RE = /^AT(\d+)#{DIFFICULTY_RE}?$/io.freeze
       # 電子戦の正規表現
-      EL_RE = /\AEL(\d+)#{DIFFICULTY_RE}?\z/io.freeze
+      EL_RE = /^EL(\d+)#{DIFFICULTY_RE}?$/io.freeze

       # 回避判定のノード
       EV = Struct.new(:num, :difficulty, :targetValue)
@@ -81,7 +81,7 @@ module BCDice
         m = NJ_RE.match(str)
         return str unless m

-        b_roll = bRollCommand(m[2], integerValueOfDifficulty(m[3] || m[4]))
+        b_roll = bRollCommand(m[2], integerValueOfDifficulty(m[4] || m[5]))
         return "#{m[1]}#{b_roll}"
       end

@@ -127,8 +127,8 @@ module BCDice
       # @return [EV]
       def parseEV(m)
         num = m[1].to_i
-        difficulty = integerValueOfDifficulty(m[2] || m[3])
-        targetValue = m[4]&.to_i
+        difficulty = integerValueOfDifficulty(m[3] || m[4])
+        targetValue = m[5]&.to_i

         return EV.new(num, difficulty, targetValue)
       end
@@ -138,7 +138,7 @@ module BCDice
       # @return [AT]
       def parseAT(m)
         num = m[1].to_i
-        difficulty = integerValueOfDifficulty(m[2] || m[3])
+        difficulty = integerValueOfDifficulty(m[3] || m[4])

         return AT.new(num, difficulty)
       end
@@ -148,7 +148,7 @@ module BCDice
       # @return [EL]
       def parseEL(m)
         num = m[1].to_i
-        difficulty = integerValueOfDifficulty(m[2] || m[3])
+        difficulty = integerValueOfDifficulty(m[3] || m[4])

         return EL.new(num, difficulty)
       end
@@ -218,7 +218,7 @@ module BCDice
       def integerValueOfDifficulty(s)
         return 4 unless s

-        return s.to_i if /\A[2-6]\z/.match(s)
+        return s.to_i if /^[2-6]$/.match(s)

         return DIFFICULTY_SYMBOL_TO_INTEGER.fetch(s.upcase)
       end
diff --git a/lib/bcdice/game_system/RuinBreakers.rb b/lib/bcdice/game_system/RuinBreakers.rb
--- a/lib/bcdice/game_system/RuinBreakers.rb
+++ b/lib/bcdice/game_system/RuinBreakers.rb
@@ -67,8 +67,8 @@ module BCDice
           return nil
         end

-        success_rate = ArithmeticEvaluator.eval(m[1])
-        critical_border = m[4]&.to_i || [success_rate / 5, 1].max
+        success_rate = ArithmeticEvaluator.eval(m[1]).to_i
+        critical_border = m[4]&.to_i || [(success_rate / 5).to_i, 1].max
         fumble_border = m[6]&.to_i || (success_rate < 100 ? 96 : 99)

         total = @randomizer.roll_once(100)
diff --git a/lib/bcdice/game_system/Ryutama.rb b/lib/bcdice/game_system/Ryutama.rb
--- a/lib/bcdice/game_system/Ryutama.rb
+++ b/lib/bcdice/game_system/Ryutama.rb
@@ -86,14 +86,14 @@ module BCDice

         diceBase = dice1

-        dice1 = diceBase / 10
+        dice1 = (diceBase / 10).to_i
         dice2 = diceBase % 10

         if isValidDice(dice1, dice2)
           return dice1, dice2
         end

-        dice1 = diceBase / 100
+        dice1 = (diceBase / 100).to_i
         dice2 = diceBase % 100

         if isValidDice(dice1, dice2)
diff --git a/lib/bcdice/game_system/SRS.rb b/lib/bcdice/game_system/SRS.rb
--- a/lib/bcdice/game_system/SRS.rb
+++ b/lib/bcdice/game_system/SRS.rb
@@ -75,15 +75,15 @@ module BCDice
                          .join('|')

           @aliases_re_for_srs_roll_with_target_value = Regexp.new(
-            '\A' \
+            '^' \
             "(?:#{aliases_part})" \
-            '((?:[-+][-+\d]+)?>=\d+(?:\[\d*(?:,\d+)?\])?)\z'
+            '((?:[-+][-+\d]+)?>=\d+(?:\[\d*(?:,\d+)?\])?)$'
           )

           @aliases_re_for_srs_roll_without_target_value = Regexp.new(
-            '\A' \
+            '^' \
             "(?:#{aliases_part})" \
-            '([-+][-+\d]+)?(\[\d*(?:,\d+)?\])?\z'
+            '([-+][-+\d]+)?(\[\d*(?:,\d+)?\])?$'
           )

           prepare_help_msg_for_aliases_for_srs_roll(aliases_upcase)
@@ -194,10 +194,10 @@ module BCDice

       # 目標値あり成功判定の正規表現
       SRS_ROLL_WITH_TARGET_VALUE_RE =
-        /\A2D6([-+][-+\d]+)?>=(\d+)(?:\[(\d+)?(?:,(\d+))?\])?\z/.freeze
+        /^2D6([-+][-+\d]+)?>=(\d+)(?:\[(\d+)?(?:,(\d+))?\])?$/.freeze
       # 目標値なし成功判定の正規表現
       SRS_ROLL_WITHOUT_TARGET_VALUE_RE =
-        /\A2D6([-+][-+\d]+)?\[(\d+)?(?:,(\d+))?\]\z/.freeze
+        /^2D6([-+][-+\d]+)?\[(\d+)?(?:,(\d+))?\]$/.freeze

       # 既定の閾値指定表記
       SRS_ROLL_DEFAULT_THRESHOLDS =
diff --git a/lib/bcdice/game_system/ShinMegamiTenseiKakuseihen.rb b/lib/bcdice/game_system/ShinMegamiTenseiKakuseihen.rb
--- a/lib/bcdice/game_system/ShinMegamiTenseiKakuseihen.rb
+++ b/lib/bcdice/game_system/ShinMegamiTenseiKakuseihen.rb
@@ -45,7 +45,7 @@ module BCDice
       def split_tens(value)
         value %= 100

-        ones = value / 10
+        ones = (value / 10).to_i
         tens = value % 10

         return [ones, tens]
diff --git a/lib/bcdice/game_system/ShinobiGami.rb b/lib/bcdice/game_system/ShinobiGami.rb
--- a/lib/bcdice/game_system/ShinobiGami.rb
+++ b/lib/bcdice/game_system/ShinobiGami.rb
@@ -102,7 +102,7 @@ module BCDice
         cmd = parser.parse(command)
         return nil unless cmd

-        times = cmd.command.start_with?(/\d/) ? cmd.command.to_i : 2
+        times = cmd.command =~ /^\d/ ? cmd.command.to_i : 2
         return nil if times <= 1

         cmd.critical ||= 12
diff --git a/lib/bcdice/game_system/Skynauts.rb b/lib/bcdice/game_system/Skynauts.rb
--- a/lib/bcdice/game_system/Skynauts.rb
+++ b/lib/bcdice/game_system/Skynauts.rb
@@ -78,7 +78,7 @@ module BCDice
         debug("移動修正", bonus)

         total = @randomizer.roll_once(6)
-        move_point_base = (total / 2) <= 0 ? 1 : (total / 2)
+        move_point_base = (total / 2).to_i <= 0 ? 1 : (total / 2).to_i
         movePoint = move_point_base + bonus
         debug("移動エリア数", movePoint)

diff --git a/lib/bcdice/game_system/ToshiakiHolyGrailWar.rb b/lib/bcdice/game_system/ToshiakiHolyGrailWar.rb
--- a/lib/bcdice/game_system/ToshiakiHolyGrailWar.rb
+++ b/lib/bcdice/game_system/ToshiakiHolyGrailWar.rb
@@ -80,7 +80,7 @@ module BCDice
         if modifier <= 10
           0
         else
-          modifier / 10
+          (modifier / 10).to_i
         end
       end

diff --git a/lib/bcdice/game_system/TunnelsAndTrolls.rb b/lib/bcdice/game_system/TunnelsAndTrolls.rb
--- a/lib/bcdice/game_system/TunnelsAndTrolls.rb
+++ b/lib/bcdice/game_system/TunnelsAndTrolls.rb
@@ -253,7 +253,7 @@ module BCDice
       end

       def success_level(total, dice_total)
-        level = (total - 15) / 5
+        level = ((total - 15) / 5).to_i
         if level <= 0
           "失敗 ＞ 経験値#{dice_total}"
         else
diff --git a/lib/bcdice/game_system/VampireTheMasquerade5th.rb b/lib/bcdice/game_system/VampireTheMasquerade5th.rb
--- a/lib/bcdice/game_system/VampireTheMasquerade5th.rb
+++ b/lib/bcdice/game_system/VampireTheMasquerade5th.rb
@@ -44,7 +44,7 @@ module BCDice
       register_prefix('\d*VMF')

       def eval_game_system_specific_command(command)
-        m = /\A(\d+)?(VMF)(\d+)(\+(\d+))?/.match(command)
+        m = /^(\d+)?(VMF)(\d+)(\+(\d+))?/.match(command)
         unless m
           return ''
         end
@@ -94,7 +94,7 @@ module BCDice

       def get_critical_success(ten_dice)
         # 10の目が2個毎に追加2成功
-        return ((ten_dice / 2) * 2)
+        return ((ten_dice / 2).to_i * 2)
       end

       def make_dice_roll(dice_pool)
diff --git a/lib/bcdice/game_system/Villaciel.rb b/lib/bcdice/game_system/Villaciel.rb
--- a/lib/bcdice/game_system/Villaciel.rb
+++ b/lib/bcdice/game_system/Villaciel.rb
@@ -210,8 +210,8 @@ module BCDice

         roll_result1 = @randomizer.roll_once(D6)
         chart_text, roll_result2 = case chart_symbol
-                                   when 'V' then get_table_by_1d6(VILLACIEL_PREVIOUS_JOB_CHART[(roll_result1 - 1) / 3])
-                                   when 'A' then get_table_by_1d6(ARMESEAR_PREVIOUS_JOB_CHART[(roll_result1 - 1) / 2])
+                                   when 'V' then get_table_by_1d6(VILLACIEL_PREVIOUS_JOB_CHART[((roll_result1 - 1) / 3).to_i])
+                                   when 'A' then get_table_by_1d6(ARMESEAR_PREVIOUS_JOB_CHART[((roll_result1 - 1) / 2).to_i])
                                    end

         chart_title = case chart_symbol
@@ -278,7 +278,7 @@ module BCDice
                                                    when 6 then 3
                                                    end
                                      get_table_by_1d6(VILLACIEL_PETIT_QUEST_CHART[chart_index])
-                                   when 'A' then get_table_by_1d6(ARMESEAR_PETIT_QUEST_CHART[(roll_result1 - 1) / 2])
+                                   when 'A' then get_table_by_1d6(ARMESEAR_PETIT_QUEST_CHART[((roll_result1 - 1) / 2).to_i])
                                    end

         chart_title = case chart_symbol
diff --git a/lib/bcdice/game_system/Warhammer.rb b/lib/bcdice/game_system/Warhammer.rb
--- a/lib/bcdice/game_system/Warhammer.rb
+++ b/lib/bcdice/game_system/Warhammer.rb
@@ -56,9 +56,9 @@ module BCDice
         return nil unless cmp_op == :<=

         if total <= target
-          Result.success("成功(成功度#{(target - total) / 10})")
+          Result.success("成功(成功度#{((target - total) / 10).to_i})")
         else
-          Result.failure("失敗(失敗度#{(total - target) / 10})")
+          Result.failure("失敗(失敗度#{((total - target) / 10).to_i})")
         end
       end

diff --git a/lib/bcdice/game_system/Warhammer4.rb b/lib/bcdice/game_system/Warhammer4.rb
--- a/lib/bcdice/game_system/Warhammer4.rb
+++ b/lib/bcdice/game_system/Warhammer4.rb
@@ -48,8 +48,8 @@ module BCDice
         return Result.nothing if target == '?'
         return nil unless cmp_op == :<=

-        t10 = total / 10
-        d10 = target / 10
+        t10 = (total / 10).to_i
+        d10 = (target / 10).to_i
         sl = d10 - t10

         if total <= 5 && sl < 1
@@ -283,7 +283,7 @@ module BCDice
         if dice == 100
           return 0, 0
         else
-          return dice / 10, dice % 10
+          return (dice / 10).to_i, dice % 10
         end
       end

diff --git a/lib/bcdice/game_system/WorldOfDarkness.rb b/lib/bcdice/game_system/WorldOfDarkness.rb
--- a/lib/bcdice/game_system/WorldOfDarkness.rb
+++ b/lib/bcdice/game_system/WorldOfDarkness.rb
@@ -39,7 +39,7 @@ module BCDice
         enabled_reroll = false
         enabled_20th = false

-        md = command.match(/\A(\d+)(ST[SA]?)(\d+)?([+-]\d+)?/)
+        md = command.match(/^(\d+)(ST[SA]?)(\d+)?([+-]\d+)?/)

         dice_pool = md[1].to_i
         case md[2]
diff --git a/lib/bcdice/game_system/YearZeroEngine.rb b/lib/bcdice/game_system/YearZeroEngine.rb
--- a/lib/bcdice/game_system/YearZeroEngine.rb
+++ b/lib/bcdice/game_system/YearZeroEngine.rb
@@ -44,7 +44,7 @@ module BCDice
       end

       def eval_game_system_specific_command(command)
-        m = /\A(\d+)?(YZE|MYZ)(\d+)((\+|-)(\d+))?(\+(\d+))?/.match(command)
+        m = /^(\d+)?(YZE|MYZ)(\d+)((\+|-)(\d+))?(\+(\d+))?/.match(command)
         unless m
           return ''
         end
diff --git a/lib/bcdice/game_system/Yggdrasill.rb b/lib/bcdice/game_system/Yggdrasill.rb
--- a/lib/bcdice/game_system/Yggdrasill.rb
+++ b/lib/bcdice/game_system/Yggdrasill.rb
@@ -198,7 +198,7 @@ module BCDice
             1
           elsif value <= 11
             dice = @randomizer.roll_once(6)
-            total = dice / 2
+            total = (dice / 2).to_i
             "#{total}(#{dice}[#{dice}]/2)"
           elsif value <= 14
             dice = @randomizer.roll_once(6)
diff --git a/lib/bcdice/game_system/beginning_idol/chain_d66_table.rb b/lib/bcdice/game_system/beginning_idol/chain_d66_table.rb
--- a/lib/bcdice/game_system/beginning_idol/chain_d66_table.rb
+++ b/lib/bcdice/game_system/beginning_idol/chain_d66_table.rb
@@ -18,7 +18,7 @@ module BCDice
           dice = randomizer.roll_barabara(2, 6).sort

           value = dice[0] * 10 + dice[1]
-          chosen = @items[value]
+          chosen = @items[value.to_s]
           body = chosen.map { |item| item.respond_to?(:roll) ? item.roll(randomizer) : item }.join("\n")

           return "#{@name}(#{value}) ＞ #{body}"
diff --git a/lib/bcdice/game_system/beginning_idol/costume_table.rb b/lib/bcdice/game_system/beginning_idol/costume_table.rb
--- a/lib/bcdice/game_system/beginning_idol/costume_table.rb
+++ b/lib/bcdice/game_system/beginning_idol/costume_table.rb
@@ -20,7 +20,7 @@ module BCDice
         # @return [String]
         def roll(randomizer)
           value = randomizer.roll_d66(D66SortType::ASC)
-          "#{@name}(#{value}) ＞ #{@items[value]}"
+          "#{@name}(#{value}) ＞ #{@items[value.to_s]}"
         end

         # @return [DiceTable::D66Table]
diff --git a/lib/bcdice/game_system/beginning_idol/random_event_table.rb b/lib/bcdice/game_system/beginning_idol/random_event_table.rb
--- a/lib/bcdice/game_system/beginning_idol/random_event_table.rb
+++ b/lib/bcdice/game_system/beginning_idol/random_event_table.rb
@@ -21,7 +21,7 @@ module BCDice
           name = I18n.t("BeginningIdol.RE.name", locale: @locale)
           result_format = I18n.t("BeginningIdol.RE.format", locale: @locale)

-          chosen = table[:items][d66_index]
+          chosen = table[:items][d66_index.to_s]

           return "#{name} ＞ (1D6) ＞ #{first_index}\n#{table[:name]} ＞ [#{d66_index}] ＞ #{format(result_format, event: chosen[0], page: chosen[1])}"
         end
diff --git a/lib/bcdice/game_system/beginning_idol/table.rb b/lib/bcdice/game_system/beginning_idol/table.rb
--- a/lib/bcdice/game_system/beginning_idol/table.rb
+++ b/lib/bcdice/game_system/beginning_idol/table.rb
@@ -76,9 +76,9 @@ module BCDice
             I18n.t("BeginningIdol.GG.name", locale: locale),
             I18n.t("BeginningIdol.GG.items", locale: locale).to_h do |index, value|
               chain =
-                if [23, 24, 25].include?(index)
+                if ["23", "24", "25"].include?(index)
                   [value, rare_skill_table]
-                elsif index == 56
+                elsif index == "56"
                   [value, item_table]
                 else
                   [value]
@@ -88,9 +88,13 @@ module BCDice
             end
           )

+          ha_items = I18n.t("BeginningIdol.HA.items", locale: locale)
+          ha_items["22"] = [ha_items["22"], SkillHometown.new(skill_table)].flatten
+
+
           ha = ChainD66Table.new(
             I18n.t("BeginningIdol.HA.name", locale: locale),
-            I18n.t("BeginningIdol.HA.items", locale: locale).dup.tap { |items| items[22].push(SkillHometown.new(skill_table)) }
+            ha_items
           )

           {
diff --git a/lib/bcdice/game_system/cthulhu7th/full_auto.rb b/lib/bcdice/game_system/cthulhu7th/full_auto.rb
--- a/lib/bcdice/game_system/cthulhu7th/full_auto.rb
+++ b/lib/bcdice/game_system/cthulhu7th/full_auto.rb
@@ -43,7 +43,7 @@ module BCDice
           broken_number = m[3].to_i
           bonus_dice_count = m[4]&.to_i || 0
           stop_count = m[5]&.downcase || ""
-          bullet_set_count_cap = m[6]&.to_i || diff / 10
+          bullet_set_count_cap = m[6]&.to_i || (diff / 10).to_i

           output = ""

@@ -55,8 +55,8 @@ module BCDice
           end

           # ボレーの上限の設定がおかしい場合の注意表示
-          if (bullet_set_count_cap > diff / 10) && (diff > 39) && !m[6].nil?
-            bullet_set_count_cap = diff / 10
+          if (bullet_set_count_cap > (diff / 10).to_i) && (diff > 39) && !m[6].nil?
+            bullet_set_count_cap = (diff / 10).to_i
             output += "ボレーの弾丸の数の上限は\[技能値÷10（切り捨て）\]発なので、それより高い数を指定できません。ボレーの弾丸の数を#{bullet_set_count_cap}発に変更します。\n"
           elsif (diff <= 39) && (bullet_set_count_cap > 3) && !m[6].nil?
             bullet_set_count_cap = 3
@@ -247,7 +247,7 @@ module BCDice
         end

         def getSetOfBullet(diff, bullet_set_count_cap)
-          bullet_set_count = diff / 10
+          bullet_set_count = (diff / 10).to_i

           if bullet_set_count_cap < bullet_set_count
             bullet_set_count = bullet_set_count_cap
@@ -261,7 +261,7 @@ module BCDice
         end

         def getHitBulletCountBase(diff, bullet_set_count)
-          hit_bullet_count_base = (bullet_set_count / 2)
+          hit_bullet_count_base = (bullet_set_count / 2).to_i

           if (diff >= 1) && (diff < 30)
             hit_bullet_count_base = 1 # 技能値29以下での最低値保障
diff --git a/lib/bcdice/loader.rb b/lib/bcdice/loader.rb
--- a/lib/bcdice/loader.rb
+++ b/lib/bcdice/loader.rb
@@ -28,7 +28,7 @@ module BCDice
       class_name = id.tr(":.", "_")

       # 対象ディレクトリの外にあるファイルをロードされないように制約を設ける
-      unless /\A[A-Z]\w*\z/.match?(class_name)
+      unless /^[A-Z]\w*$/.match?(class_name)
         return nil
       end

diff --git a/lib/bcdice/preprocessor.rb b/lib/bcdice/preprocessor.rb
--- a/lib/bcdice/preprocessor.rb
+++ b/lib/bcdice/preprocessor.rb
@@ -1,5 +1,7 @@
 # frozen_string_literal: true

+require "bcdice/arithmetic"
+
 module BCDice
   # 入力文字列に対して前処理を行う
   #
diff --git a/lib/bcdice/user_defined_dice_table.rb b/lib/bcdice/user_defined_dice_table.rb
--- a/lib/bcdice/user_defined_dice_table.rb
+++ b/lib/bcdice/user_defined_dice_table.rb
@@ -108,7 +108,7 @@ module BCDice
     def parse
       return if @rows

-      lines = @text.split(/\R/).map(&:rstrip).reject(&:empty?)
+      lines = @text.split(/\r?\n/).map(&:rstrip).reject(&:empty?)
       @name = lines.shift
       @type = lines.shift.upcase
       @rows = lines
diff --git a/test/data/calc.toml b/test/data/calc.toml
--- a/test/data/calc.toml
+++ b/test/data/calc.toml
@@ -256,3 +256,27 @@ input = "sc1+4*3/2"
 output = "c(1+4*3/2) ＞ 7"
 secret = true
 rands = []
+
+[[ test ]]
+game_system = "DiceBot"
+input = "C(1/2F)"
+output = "c(1/2F) ＞ 0"
+rands = []
+
+[[ test ]]
+game_system = "DiceBot"
+input = "1d(3/2U)"
+output = "(1D2) ＞ 1"
+rands = [{ sides = 2, value = 1 }]
+
+[[ test ]]
+game_system = "DiceBot"
+input = "(3/2F)d1"
+output = "(1D1) ＞ 1"
+rands = [{ sides = 1, value = 1 }]
+
+[[ test ]]
+game_system = "DiceBot"
+input = "c((1+2)/2F) 切り捨て"
+output = "c((1+2)/2F) ＞ 1"
+rands = [{ sides = 1, value = 1 }]
